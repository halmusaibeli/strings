%ifndef strings_h
%define strings_h

--  split_str: Takes a string and a separator and splits it into an array
-----------------
-- str : STRING - the STRING to separate
-- sep : STRING - which character separates the string
--
-- Examples:
--   split_str('one,two,three',',')
--   # => ['one','two','three','','',...,'']
-- Returns:  an ARRAY[16] of STRING[16]
ROUTINE split_str(str:STRING; sep:STRING; out:ARRAY[*] OF STRING) FROM strings
ROUTINE char_count(str:STRING; char:STRING) : INTEGER FROM strings
--handle string overflow by splitting the string to a new line
--if more than specified length
ROUTINE str_parse(str:STRING ; max_length : INTEGER) : STRING FROM strings
--do delimeter sanity check
ROUTINE delim_check(d :STRING) FROM strings
ROUTINE delim_strip(s : STRING; delim : STRING) : STRING FROM strings
-- strip whitespace from left side of string
ROUTINE lstrip(s : STRING)                : STRING FROM strings
-- strip whitespace from right side of string
ROUTINE rstrip(s : STRING)                : STRING FROM strings
--converts a boolean value into string
ROUTINE b_to_s(b : BOOLEAN)               : STRING FROM strings
--converts an integer value into string
ROUTINE i_to_s(i : INTEGER)               : STRING FROM strings
--converts a real number to a string
ROUTINE r_to_s(r : REAL)                  : STRING FROM strings
--array to a string seperated by character delim
ROUTINE rarr_to_s(arr : ARRAY[*] OF REAL; delim : STRING) : STRING FROM strings
ROUTINE iarr_to_s(arr : ARRAY[*] OF INTEGER; delim : STRING) : STRING FROM strings
--2d array to a string seperated by character delim
ROUTINE rarr2d_to_s(arr : ARRAY[*,*] OF REAL; row : ARRAY[*] OF REAL; row_delim, col_delim : STRING) : STRING FROM strings
-- converts a position to a formatted string
-- eg.)
-- X: 1.1 Y: 2.2 Z: 3.3
-- W: 4.4 P: 5.5 R: 6.6
ROUTINE p_to_s(p : XYZWPR)                : STRING FROM strings
-- convert joint into a deliminated string
ROUTINE pose_to_s(p : XYZWPR; delim : STRING)            : STRING FROM strings
--convert vector to string
ROUTINE vec_to_s(v: VECTOR; delim : STRING)   : STRING FROM strings
-- convert joint into a deliminated string
ROUTINE joint_to_s(pose : JOINTPOS; delim : STRING)            : STRING FROM strings
-- convert a string (e.g. '10.0,30.0,190.0,-90.0,0.0,180.0') into
-- a jointpos type
ROUTINE s_to_joint(s : STRING; delim : STRING)            : JOINTPOS FROM strings
--print out a XYZWPREXT data type
-- GP1:
-- UF : 1, UT : 2,  CONFIG : 'F U T, 0, 0, 0',
-- X = 1.0 mm, Y = 2.0 mm, Z = 3.0 mm,
-- W = 90.0 deg, P = 90.0 deg, R = 180.0 deg
ROUTINE p_to_s_conf(p : XYZWPREXT; grp_no : INTEGER; uframe_no : INTEGER; & 
                  utool_no : INTEGER) : STRING FROM strings
-- Escapes quotes in a string
ROUTINE esc_quotes(s : STRING)            : STRING FROM strings
-- searches for a string "srchStr" within another 
-- longer string "str"
ROUTINE search_str(srchStr : STRING; str: STRING) : BOOLEAN FROM strings
--Determine if character is a number
ROUTINE charisnum(s : STRING)               : BOOLEAN FROM strings
--determine if a string is a real number
ROUTINE strisreal(s : STRING)               : BOOLEAN FROM strings
--determine if a string is a integer
ROUTINE strisint(s : STRING)               : BOOLEAN FROM strings
--convert a string to an integer
ROUTINE s_to_i(s : STRING) 			        : INTEGER FROM strings
--convert a string to real
ROUTINE s_to_r(s : STRING) 			        : REAL FROM strings
--convert binary string to a integer
ROUTINE bin_to_i(s : STRING) : INTEGER FROM strings
--convert integer to binary string
ROUTINE i_to_byte(i : INTEGER; msb : BOOLEAN) : STRING FROM strings
--convert string to vector
ROUTINE s_to_vec(s: STRING; delim : STRING)   : VECTOR FROM strings
--convert string to xyzwpr
ROUTINE s_to_xyzwpr(s: STRING; delim : STRING)   : XYZWPR FROM strings
--convert a string to real array with a specified delimiter
--in the string
ROUTINE s_to_arr(s : STRING; delim : STRING; out_arr : ARRAY[*] OF STRING) FROM strings
--convert string to array of reals
ROUTINE s_to_rarr(s : STRING; delim : STRING; out_arr : ARRAY[*] OF REAL) FROM strings
--convert string to array of ints
ROUTINE s_to_iarr(s : STRING; delim : STRING; out_arr : ARRAY[*] OF INTEGER) FROM strings
-- convert 1d arrays between various types
ROUTINE sarr_to_rarr(sarr : ARRAY[*] OF STRING ; out_rarr : ARRAY[*] OF REAL) FROM strings
ROUTINE rarr_to_sarr(rarr : ARRAY[*] OF REAL ; out_sarr : ARRAY[*] OF STRING) FROM strings
ROUTINE sarr_to_iarr(sarr : ARRAY[*] OF STRING ; out_iarr : ARRAY[*] OF INTEGER) FROM strings
--convert numregister into a string, (ie. R[1]=150.0 , o->'150.0' )
ROUTINE numreg_to_s(reg_no : INTEGER)             : STRING FROM strings
--convert string register into a string, (ie. 'SR[1]=foo' o-> foo)
ROUTINE strreg_to_s(reg_no : INTEGER)             : STRING FROM strings
--convert numregister into a string, using p_to_s_conf(), or joint_to_s()
ROUTINE posreg_to_s(reg_no, grp_no : INTEGER)     : STRING FROM strings

%endif --strings_h
