PROGRAM strings
%NOLOCKGROUP

%INCLUDE strings.klh

BEGIN
END strings

-- Public: Takes a string and a separator and splits it into an array
--
-- str : STRING - the STRING to separate
-- sep : STRING - which character separates the string
--
-- Examples:
--
--   split_str('one,two,three',',')
--   # => ['one','two','three','','',...,'']
--
-- Returns an ARRAY[16] of STRING[16]
ROUTINE split_str
  VAR
    i   : INTEGER
    k   : INTEGER
	start    : INTEGER
  BEGIN
    k = 1

    -- initialize the whole out array to ''
    FOR i = 1 TO array_len(out) DO
      out[i] = ''
    ENDFOR

	start = 1

    FOR i = 1 TO (STR_LEN(str)-STR_LEN(sep)) DO
		IF (SUB_STR(str, i, STR_LEN(sep))=sep) THEN
			out[k] = SUB_STR(str, start, (i-start))
			k = k + 1
			start = i+STR_LEN(sep)
      IF (k > array_len(out)-1) THEN
        GO TO SKIP_SPLT
      ENDIF
		ENDIF
    ENDFOR
    SKIP_SPLT::

	out[k] = SUB_STR(str, start, (STR_LEN(str)-start+1))
  END split_str

ROUTINE char_count
  VAR
    i   : INTEGER
    count : INTEGER
  BEGIN
    count = 0
    FOR i = 1 TO (STR_LEN(str)-STR_LEN(char)+1) DO
      IF (SUB_STR(str, i, STR_LEN(char))=char) THEN
        count = count + 1
      ENDIF
    ENDFOR

    RETURN(count)
  END char_count

-- strip whitespace from left side of string
ROUTINE lstrip
  VAR
    i : INTEGER
  BEGIN
    FOR i = 1 TO STR_LEN(s) DO
      IF SUB_STR(s,i,1) <> ' ' THEN
        RETURN(SUB_STR(s,i,STR_LEN(s)))
      ENDIF
    ENDFOR

    RETURN(s)
  END lstrip

-- strip whitespace from right side of string
ROUTINE rstrip
  VAR
    i : INTEGER
  BEGIN
    FOR i = STR_LEN(s) DOWNTO 1 DO
      IF SUB_STR(s,i,1) <> ' ' THEN
        RETURN(SUB_STR(s,1,i))
      ENDIF
    ENDFOR

    RETURN(s)
  END rstrip

ROUTINE b_to_s
  BEGIN
    IF b THEN
      RETURN('true')
    ELSE
      RETURN('false')
    ENDIF
  END b_to_s

ROUTINE i_to_s
  VAR
    s : STRING[16]
  BEGIN
    IF UNINIT(i) THEN
      RETURN('null')
    ENDIF

    CNV_INT_STR(i, 0, 0, s)
    RETURN(lstrip(s)) 
  END i_to_s

ROUTINE r_to_s
  VAR
    s : STRING[16]
    i : INTEGER
  BEGIN
    IF UNINIT(r) THEN
      RETURN('null')
    ENDIF

    CNV_REAL_STR(r, 0, 3, s)
    s = lstrip(s)

    -- fix -.234 issue
    IF SUB_STR(s,1,1) = '-' THEN
      -- see if next char is .
      IF SUB_STR(s,2,1) = '.' THEN
        s = '-0.' + SUB_STR(s,3,STR_LEN(s))
      ENDIF
    ENDIF

    -- add leading zero
    IF SUB_STR(s,1,1) = '.' THEN
      s = '0' + s
    ENDIF

    -- get rid of trailing zeroes
    FOR i = STR_LEN(s) DOWNTO 1 DO
      IF SUB_STR(s,i,1) <> '0' THEN
        -- see if prev char is a . so we leave 1 trailing zero
        IF SUB_STR(s,i,1) = '.' THEN
          RETURN(SUB_STR(s,1,i+1))
        ELSE
          RETURN(SUB_STR(s,1,i))
        ENDIF
      ENDIF
    ENDFOR

    RETURN(s)
  END r_to_s

ROUTINE p_to_s
  BEGIN
    RETURN('X: ' + r_to_s(p.x) + ' Y: ' + r_to_s(p.y) + ' Z: ' + r_to_s(p.z) + chr(13) &
      + 'W: ' + r_to_s(p.w) + ' P: ' + r_to_s(p.p) + ' R: ' + r_to_s(p.r))
   END p_to_s

ROUTINE joint_to_s
  VAR
    arr : ARRAY[9] OF REAL
    status : INTEGER
    i  : INTEGER
    s : STRING[50]
  BEGIN
    -- sanity check deliminating character
    IF STR_LEN(delim) > 1 THEN
      -- applicable for chars ' :;,/'
      IF NOT ((delim = ' ') OR (delim = ':') OR (delim = ';') & 
               OR (delim = ',') OR (delim = '/')) THEN
        CLR_IO_STAT(TPDISPLAY)
        WRITE TPERROR(delim, 'is not a deliminating character. Check header.')
      ENDIF
  	ENDIF

    --convert JPOS into a string
    CNV_JPOS_REL(pose, arr, status)

    --string joints together with delimiter seperator
    s = ''
    FOR i = 1 TO ARRAY_LEN(arr) DO
      IF (NOT UNINIT(arr[i])) THEN
        s = s + delim + r_to_s(arr[i])
      ENDIF
    ENDFOR

    -- remove first delimiter
    s = SUB_STR(s,2,STR_LEN(s))

    RETURN(s)
   END joint_to_s

ROUTINE s_to_joint
  VAR
    r_joints : ARRAY[9] OF REAL
    pose : JOINTPOS9
    status : INTEGER
    i : INTEGER
  BEGIN
    s_to_r_arr(s, delim, r_joints)
    --set uninitialized data
    FOR i=1 TO ARRAY_LEN(r_joints) DO
      IF UNINIT(r_joints[i]) THEN
        r_joints[i] = 0
      ENDIF
    ENDFOR
    --convert to jointpos
    CNV_REL_JPOS(r_joints, pose, status)
    IF (STATUS <> 0) THEN
      WRITE TPERROR('s_to_joint, jpos conversion failed.')
    ENDIF

    RETURN(pose)

  END s_to_joint


-- print xyzwprext data type
ROUTINE p_to_s_conf
VAR
    configstr : STRING[25]
  BEGIN
    IF (UNINIT(uframe_no)) OR (UNINIT(utool_no)) THEN
      WRITE TPERROR('frame number must be set.')
    ENDIF
    --convert config to string
    CNV_CONF_STR(p.config_data, configstr)

    IF (UNINIT(grp_no)) OR (grp_no <= 0) THEN
        RETURN('UF : '+ i_to_s(uframe_no) +', UT : '+ i_to_s(utool_no) +',' & 
            + '  CONFIG : '+ configstr + chr(13) &
            + 'X = '+ r_to_s(p.x) +'mm, Y = '+ r_to_s(p.y) + 'mm, Z = '+ r_to_s(p.z) +'mm, '+ chr(13) &
            + 'W = '+ r_to_s(p.w) +'deg, P ='+ r_to_s(p.p) +'deg, R ='+ r_to_s(p.r) +'deg')
    ELSE
        RETURN('GP' + i_to_s(grp_no) + ':' + chr(13) &
            + 'UF : '+ i_to_s(uframe_no) +', UT : '+ i_to_s(utool_no) +',' & 
            + '  CONFIG : '+ configstr + chr(13) &
            + 'X = '+ r_to_s(p.x) +'mm, Y = '+ r_to_s(p.y) + 'mm, Z = '+ r_to_s(p.z) +'mm, '+ chr(13) &
            + 'W = '+ r_to_s(p.w) +'deg, P ='+ r_to_s(p.p) +'deg, R ='+ r_to_s(p.r) +'deg')
    ENDIF
  END p_to_s_conf

-- Escapes quotes in a string
ROUTINE esc_quotes
  VAR
    i : INTEGER
    r : STRING[254]
    c : STRING[1]
  BEGIN
    r = ''
    FOR i=1 TO STR_LEN(s) DO
      -- chr(44) is '
      c = SUB_STR(s,i,1)
      IF (c = chr(44)) OR (c = '"') THEN
        r = r + '\'
      ENDIF

      r = r + c
    ENDFOR

    RETURN(r)
  END esc_quotes

-- searches for a string "srchStr" within another 
-- longer string "str"
-- need to handle error catching
-- return a boolean if found of not
ROUTINE search_str
  VAR
  	strLen  : INTEGER
  	srchLen : INTEGER
  	dmmy    : STRING[30]
  	found   : BOOLEAN
  	i       : INTEGER
  BEGIN
  	strLen = STR_LEN(str)
  	srchLen = STR_LEN(srchStr)
  	found = FALSE
  
  	FOR i=1 TO strLen DO
      dmmy = SUB_STR(str,i,srchLen)
      IF (dmmy = srchStr) THEN
        found = TRUE
          GOTO searched
   	 	ENDIF
  	ENDFOR
	SEARCHED::
	
	RETURN(found)
  END search_str

-- Determine if character is a number. A character of 
-- String[1] is evaluated to see if its a number. 
  ROUTINE charisnum
  VAR
    isnum : BOOLEAN
  BEGIN
  	isnum = FALSE
  	IF STR_LEN(s) <= 1 THEN
  		IF (s='0') OR (s='1') OR (s='2') OR  (s='3') OR (s= '4') OR (s='5') OR (s='6') OR (s='7') OR (s='8') OR (s='9') THEN
  			isnum = TRUE
  		ENDIF
  	ELSE
      CLR_IO_STAT(TPDISPLAY)
      WRITE TPERROR(s, ' is not a character')
  	ENDIF
  	RETURN(isnum)
  END charisnum

  -- string to integer
  ROUTINE s_to_i
   VAR
   	int : INTEGER
   	isNum : BOOLEAN
    r : REAL
  BEGIN
  	isNum = FALSE
  	-- evaluate if string is a number
  	IF SUB_STR(s,1,1) = '-' THEN
  		int = -1
  		 IF charisnum(SUB_STR(s,2,1)) THEN
  		 	isNum = TRUE
  		 ENDIF
  	ELSE
  		IF charisnum(SUB_STR(s,1,1)) THEN
  			isNum = TRUE
  		ENDIF
  	ENDIF

  	--If not a number abort
  	IF isNum = FALSE THEN
      WRITE TPERROR(s, ' is not a number')
  	ENDIF

    --parse if it is a float
    IF search_str('.', s) AND isNum THEN
      CNV_STR_REAL(s, r)
      int = TRUNC(r)
    ELSE
      -- else string is an integer
      CNV_STR_INT(s, int)
    ENDIF
  	-- error if integer is uninitalized at this point
  	IF UNINIT(int) THEN
      WRITE TPERROR(s, ' is not a integer')
  	ENDIF
  	
  	RETURN(int)
  	
  END s_to_i

  -- string to real
  ROUTINE s_to_r
  VAR
    r : REAL
  BEGIN
    CNV_STR_REAL(s, r)

    IF UNINIT(r) THEN
      WRITE TPERROR(s, ' is not a real number')
  	ENDIF

    RETURN(r)
  END s_to_r

ROUTINE s_to_r_arr
-- define chunk size in preprocessor
%define chunk 16
%defeval chunk2 %eval chunk+1
  VAR
    i : INTEGER
    j : INTEGER
    idx : INTEGER
    splits : INTEGER
    -- array needs to be 1 higher than chunk size
    -- to store the excess string during the split
    -- operation.
    s_arr : ARRAY[chunk2] of STRING[chunk]
  BEGIN
    -- initialize output array index
    idx = 0
    -- count how many splits will be made
    splits = char_count(s, delim)
    -- divide by chunks to accomodate s_arr variables size
    splits = TRUNC(splits/chunk) + 1

    --loop split function over total number of chunks
    FOR i=1 TO splits DO
      --split by delimiter in chunk sized array
      split_str(s, delim, s_arr)
      --loop over size of s_arr, and store real values
      -- into final output array.
      FOR j=idx TO (chunk*i-1) DO
        IF (NOT(s_arr[j MOD chunk + 1] = '')) AND (j < ARRAY_LEN(out_arr)) THEN
          CNV_STR_REAL(s_arr[j MOD chunk + 1], out_arr[j + 1])
        ENDIF
      ENDFOR
      -- modify string to last index to see
      -- if there are more delimiter chars
      -- to parse
      s = s_arr[chunk2]
      --increase idx to next chunk
      idx = chunk
    ENDFOR

  END s_to_r_arr

ROUTINE numreg_to_s
  VAR
    real_flg    :  BOOLEAN
    real_val   :  REAL
    int_val     : INTEGER
    STATUS : INTEGER
    s_val : STRING[10]
  BEGIN
    GET_REG(reg_no, real_flg, int_val, real_val, STATUS)
    IF (STATUS <> 0) THEN
      WRITE TPERROR('numreg_to_s, numreg not found')
    ENDIF
    --store as string
    IF real_flg = FALSE THEN
      s_val = i_to_s(int_val)
    ELSE
      s_val = r_to_s(real_val)
    ENDIF

    RETURN(s_val)
  END numreg_to_s

ROUTINE posreg_to_s
  VAR
    pos_type : INTEGER
    num_axes  : INTEGER
    STATUS : INTEGER
    xyz   : XYZWPREXT
    joint : JOINTPOS
  BEGIN
    -- see which representation the posreg is in
    POS_REG_TYPE(reg_no, grp_no, pos_type, num_axes, STATUS)
    IF (STATUS <> 0) THEN
      WRITE TPERROR('posreg_to_s, error finding register type')
    ENDIF

    SELECT pos_type OF
      -- cartesian rep
      CASE (1, 2, 6) :
        -- get position register as XYZWPREXT
        xyz = GET_POS_REG(reg_no, STATUS, grp_no)
        IF (STATUS <> 0) THEN
          WRITE TPERROR('posreg_to_s, could not retrieve posreg')
        ENDIF
        -- return as string
        RETURN(p_to_s_conf(xyz, grp_no, ($MNUFRAMENUM[grp_no]), ($MNUTOOLNUM[grp_no])))
      -- joint rep
      CASE (9) :
        -- get position register as JOINTPOS
        joint = GET_JPOS_REG(reg_no, STATUS, grp_no)
        IF (STATUS <> 0) THEN
          WRITE TPERROR('posreg_to_s, could not retrieve posreg')
        ENDIF
        -- return as string
        RETURN(joint_to_s(joint, ','))
    ENDSELECT
  END posreg_to_s
