PROGRAM strings
%NOLOCKGROUP

%include strings.klh

BEGIN
END strings

-- private

-- public
ROUTINE delim_check
  BEGIN
    -- sanity check deliminating character
    IF STR_LEN(d) > 1 THEN
      -- applicable for chars ' :;,/'
      IF NOT ((d = ' ') OR (d = ':') OR (d = ';') & 
               OR (d = ',') OR (d = '/')) THEN
        CLR_IO_STAT(TPDISPLAY)
        WRITE TPERROR(d, ' is not a deliminating character. Check header.')
      ENDIF
  	ENDIF
  END delim_check

ROUTINE delim_strip
  VAR
    i : INTEGER
  BEGIN
    FOR i = STR_LEN(s) DOWNTO 1 DO
      IF SUB_STR(s,i,1) <> delim THEN
        RETURN(SUB_STR(s,1,i))
      ENDIF
    ENDFOR

    RETURN(s)
  END delim_strip

-- Takes a string and a separator and splits it into an array
--
-- str : STRING - the STRING to separate
-- sep : STRING - which character separates the string
--
-- Examples:
--
--   split_str('one,two,three',',')
--   # => ['one','two','three','','',...,'']
--
-- Returns an ARRAY[16] of STRING[16]
ROUTINE split_str
  VAR
    i   : INTEGER
    k   : INTEGER
	  start : INTEGER
  BEGIN
    k = 1

    -- initialize the whole out array to ''
    FOR i = 1 TO array_len(out) DO
      out[i] = ''
    ENDFOR

	  start = 1

    FOR i = 1 TO (STR_LEN(str)-STR_LEN(sep)) DO
      IF (SUB_STR(str, i, STR_LEN(sep))=sep) THEN
        out[k] = SUB_STR(str, start, (i-start))
        k = k + 1
        start = i+STR_LEN(sep)
        IF (k > array_len(out)-1) THEN
          out[k] = SUB_STR(str, start, (STR_LEN(str)-start+1))
          RETURN
        ENDIF
      ENDIF
    ENDFOR

	  out[k] = SUB_STR(str, start, (STR_LEN(str)-start+1))
  END split_str

ROUTINE extract_str
  VAR
    i, j : INTEGER
    count : INTEGER
  BEGIN
    count = 1
    -- j = end of string , i = start of string
    j = 1
    FOR i = 1 TO (STR_LEN(str)-STR_LEN(sep)) DO
      IF (SUB_STR(str, i, STR_LEN(sep))=sep) THEN
        IF (idx = count) THEN
          RETURN(SUB_STR(str, j, i-j))
        ENDIF
        count = count + 1
        j = i + 1
      ENDIF
    ENDFOR

    RETURN(SUB_STR(str, j, (STR_LEN(str)-j+1) ))
  END extract_str


ROUTINE rev_split
  VAR
    i   : INTEGER
    k   : INTEGER
	  ed : INTEGER
  BEGIN
    k = 1

    -- initialize the whole out array to ''
    FOR i = 1 TO ARRAY_LEN(out) DO
      out[i] = ''
    ENDFOR

	  ed = STR_LEN(str) + 1

    FOR i = STR_LEN(str) DOWNTO (1+STR_LEN(sep)) DO
      IF (SUB_STR(str, i-STR_LEN(sep), STR_LEN(sep))=sep) THEN
          out[k] = SUB_STR(str, i, ed-i)
          k = k + 1
          ed = i-STR_LEN(sep)
          IF (k > array_len(out)-1) THEN
            GO TO SKP_REV_SPLT
          ENDIF
      ENDIF
    ENDFOR
    SKP_REV_SPLT::
    
    IF (SUB_STR(str, ed, STR_LEN(sep))=sep) THEN
      out[k] = SUB_STR(str, 1, ed-1)
    ELSE
      out[k] = SUB_STR(str, 1, ed)
    ENDIF

  END rev_split

ROUTINE char_count
  VAR
    i   : INTEGER
    count : INTEGER
  BEGIN
    count = 0
    FOR i = 1 TO (STR_LEN(str)-STR_LEN(char)+1) DO
      IF (SUB_STR(str, i, STR_LEN(char))=char) THEN
        count = count + 1
      ENDIF
    ENDFOR

    RETURN(count)
  END char_count

ROUTINE remove_char
  VAR
    i   : INTEGER
    count : INTEGER
    new_str : STRING[128]
  BEGIN
    FOR i = 1 TO (STR_LEN(str)-STR_LEN(char)+1) DO
      IF (SUB_STR(str, i, STR_LEN(char))=char) THEN
        --before char
        IF i > 1 THEN
          new_str = SUB_STR(str, 1, (i-1))
        ELSE
          new_str = ''
        ENDIF
        --after char
        IF ((i+STR_LEN(char)) < STR_LEN(str)) THEN
          new_str = new_str + SUB_STR(str, (i+STR_LEN(char)), (STR_LEN(str)-STR_LEN(char)-i+1) )
        ENDIF
      ENDIF
    ENDFOR

    RETURN(new_str)
  END remove_char

ROUTINE str_parse
  VAR
    i,j : INTEGER
    new_str : STRING[128]
    c : STRING[2]
  BEGIN
    --loop through character by character
    --if a newline char, or the string as past
    --the max length reset line length counter
    new_str = ''
    j=1
    FOR i=1 TO STR_LEN(str) DO
      c = SUB_STR(str, i, 1)
      IF (c=chr(13)) THEN
        j = 0
      ENDIF
      IF (j >= max_length) THEN
        --add a newine to the char
        c = c + chr(13)
        j = 0
      ENDIF

      new_str = new_str + c

      j=j+1
    ENDFOR

    RETURN(new_str)

  END str_parse

-- strip whitespace from left side of string
ROUTINE lstrip
  VAR
    i : INTEGER
  BEGIN
    FOR i = 1 TO STR_LEN(s) DO
      IF SUB_STR(s,i,1) <> ' ' THEN
        RETURN(SUB_STR(s,i,STR_LEN(s)))
      ENDIF
    ENDFOR

    RETURN(s)
  END lstrip

-- strip whitespace from right side of string
ROUTINE rstrip
  VAR
    i : INTEGER
  BEGIN
    FOR i = STR_LEN(s) DOWNTO 1 DO
      IF SUB_STR(s,i,1) <> ' ' THEN
        RETURN(SUB_STR(s,1,i))
      ENDIF
    ENDFOR

    RETURN(s)
  END rstrip

ROUTINE splitext
  VAR
    split_arr : ARRAY[2] OF STRING[64]
  BEGIN
    rev_split(s, '.' , split_arr)
    RETURN(split_arr[2])
  END splitext

ROUTINE get_ext
  VAR
    split_arr : ARRAY[2] OF STRING[4]
  BEGIN
    rev_split(s, '.' , split_arr)
    RETURN(split_arr[1])
  END get_ext

ROUTINE get_device
  VAR
    split_arr : ARRAY[2] OF STRING[3]
  BEGIN
    split_str(s, ':\', split_arr)

    IF split_arr[2] = '' THEN
      split_str(s,':', split_arr)
    ENDIF

    RETURN(split_arr[1])
  END get_device

ROUTINE basename
  VAR
    split_arr : ARRAY[2] OF STRING[16]
  BEGIN
    rev_split(s, '\' , split_arr)
    --if '\' was not found in string
    IF split_arr[2] = '' THEN
      --look for drive seperator
      rev_split(s, ':' , split_arr)
    ENDIF

    RETURN(split_arr[1])
  END basename

ROUTINE get_progname
  VAR
    i, start, ed : INTEGER
  BEGIN
    start = 0; ed = 0;
    FOR i = 1 TO (STR_LEN(s)-1) DO
      IF (SUB_STR(s, i, 1)='[') THEN
        --make sure you are not picking up an array index eg. var[1]
        IF charisnum(SUB_STR(s, i+1, 1)) THEN
          GO TO SKP_PROG_NAM
        ENDIF
        start = i + 1
      ENDIF
      IF (SUB_STR(s, i, 1)=']') THEN
        ed = i - 1
        GO TO SKP_PROG_NAM
      ENDIF
    ENDFOR
SKP_PROG_NAM::

    IF ((start = 0) OR (ed = 0)) THEN
      RETURN('')
    ENDIF

    RETURN(SUB_STR(s, start, ed-start+1))

  END get_progname

ROUTINE get_varname
  VAR
    i, start : INTEGER
  BEGIN
    start = 0
    FOR i = 1 TO (STR_LEN(s)-1) DO
      --make sure you are not picking up an array index eg. var[1]
      IF (SUB_STR(s, i, 1)='[') THEN
        IF charisnum(SUB_STR(s, i+1, 1)) THEN
          GO TO SKP_VAR_NAM
        ENDIF
      ENDIF
      IF (SUB_STR(s, i, 1)=']') THEN
        start = i + 1
        GO TO SKP_VAR_NAM
      ENDIF
    ENDFOR
SKP_VAR_NAM::

    IF (start = 0) THEN
      RETURN(s)
    ENDIF

    RETURN(SUB_STR(s, start, STR_LEN(s) ))
  END get_varname


ROUTINE b_to_s
  BEGIN
    IF b THEN
      RETURN('true')
    ELSE
      RETURN('false')
    ENDIF
  END b_to_s

ROUTINE i_to_s
  VAR
    s : STRING[16]
  BEGIN
    IF UNINIT(i) THEN
      RETURN('null')
    ENDIF

    CNV_INT_STR(i, 0, 0, s)
    RETURN(lstrip(s)) 
  END i_to_s

ROUTINE r_to_s
  VAR
    s : STRING[16]
    i : INTEGER
  BEGIN
    IF UNINIT(r) THEN
      RETURN('null')
    ENDIF

    CNV_REAL_STR(r, 0, 3, s)
    s = lstrip(s)

    -- fix -.234 issue
    IF SUB_STR(s,1,1) = '-' THEN
      -- see if next char is .
      IF SUB_STR(s,2,1) = '.' THEN
        s = '-0.' + SUB_STR(s,3,STR_LEN(s))
      ENDIF
    ENDIF

    -- add leading zero
    IF SUB_STR(s,1,1) = '.' THEN
      s = '0' + s
    ENDIF

    -- get rid of trailing zeroes
    FOR i = STR_LEN(s) DOWNTO 1 DO
      IF SUB_STR(s,i,1) <> '0' THEN
        -- see if prev char is a . so we leave 1 trailing zero
        IF SUB_STR(s,i,1) = '.' THEN
          RETURN(SUB_STR(s,1,i+1))
        ELSE
          RETURN(SUB_STR(s,1,i))
        ENDIF
      ENDIF
    ENDFOR

    RETURN(s)
  END r_to_s

ROUTINE rarr_to_s
  VAR
    s : STRING[128]
    i : INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(arr) DO
      s = s + r_to_s(arr[i])
      IF i < ARRAY_LEN(arr) THEN
        s = s + delim
      ENDIF
    ENDFOR

    RETURN(s)
  END rarr_to_s

ROUTINE iarr_to_s
  VAR
    s : STRING[128]
    i : INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(arr) DO
      s = s + i_to_s(arr[i])
      IF i < ARRAY_LEN(arr) THEN
        s = s + delim
      ENDIF
    ENDFOR

    RETURN(s)
  END iarr_to_s

ROUTINE rarr2d_to_s
  VAR
    s : STRING[128]
    i,j : INTEGER
  BEGIN
    s = ''
    FOR i=1 TO ARRAY_LEN(arr) DO
      FOR j=1 TO ARRAY_LEN(row) DO
        row[j] = arr[i,j]
      ENDFOR
      s = s + rarr_to_s(row, row_delim)
      IF i < ARRAY_LEN(arr) THEN
        s = s + col_delim
      ENDIF
    ENDFOR

    RETURN(s)
  END rarr2d_to_s

ROUTINE p_to_s
  BEGIN
    RETURN('X: ' + r_to_s(p.x) + ' Y: ' + r_to_s(p.y) + ' Z: ' + r_to_s(p.z) + chr(13) &
      + 'W: ' + r_to_s(p.w) + ' P: ' + r_to_s(p.p) + ' R: ' + r_to_s(p.r))
   END p_to_s

ROUTINE pose_to_s
  BEGIN

    delim_check(delim)

    RETURN(   r_to_s(p.x) + delim + r_to_s(p.y) + delim + r_to_s(p.z) &
    + delim + r_to_s(p.w) + delim + r_to_s(p.p) + delim + r_to_s(p.r))

   END pose_to_s

ROUTINE vec_to_s
  BEGIN

    delim_check(delim)

    RETURN(r_to_s(v.x) + delim + r_to_s(v.y) + delim  + r_to_s(v.z))

   END vec_to_s

ROUTINE joint_to_s
  VAR
    arr : ARRAY[9] OF REAL
    status : INTEGER
    i  : INTEGER
    s : STRING[50]
  BEGIN
    delim_check(delim)

    --convert JPOS into a string
    CNV_JPOS_REL(pose, arr, status)

    --string joints together with delimiter seperator
    s = ''
    FOR i = 1 TO ARRAY_LEN(arr) DO
      IF (NOT UNINIT(arr[i])) THEN
        s = s + delim + r_to_s(arr[i])
      ENDIF
    ENDFOR

    -- remove first delimiter
    s = SUB_STR(s,2,STR_LEN(s))

    RETURN(s)
   END joint_to_s

ROUTINE s_to_joint
  VAR
    r_joints : ARRAY[9] OF REAL
    s_joints : ARRAY[9] OF STRING[10]
    pose : JOINTPOS9
    status : INTEGER
    i : INTEGER
  BEGIN
    s_to_arr(s, delim, s_joints)
    sarr_to_rarr(s_joints, r_joints)
    --set uninitialized data
    FOR i=1 TO ARRAY_LEN(r_joints) DO
      IF UNINIT(r_joints[i]) THEN
        r_joints[i] = 0.0
      ENDIF
    ENDFOR
    --convert to jointpos
    CNV_REL_JPOS(r_joints, pose, status)
    IF (STATUS <> 0) THEN
      WRITE TPERROR('s_to_joint, jpos conversion failed.')
    ENDIF

    RETURN(pose)

  END s_to_joint


-- print xyzwprext data type
ROUTINE p_to_s_conf
VAR
    configstr : STRING[25]
  BEGIN
    IF (UNINIT(uframe_no)) OR (UNINIT(utool_no)) THEN
      WRITE TPERROR('frame number must be set.')
    ENDIF
    --convert config to string
    CNV_CONF_STR(p.config_data, configstr)

    IF (UNINIT(grp_no)) OR (grp_no <= 0) THEN
        RETURN('UF : '+ i_to_s(uframe_no) +', UT : '+ i_to_s(utool_no) +',' & 
            + '  CONFIG : '+ configstr + chr(13) &
            + 'X = '+ r_to_s(p.x) +'mm, Y = '+ r_to_s(p.y) + 'mm, Z = '+ r_to_s(p.z) +'mm, '+ chr(13) &
            + 'W = '+ r_to_s(p.w) +'deg, P = '+ r_to_s(p.p) +'deg, R = '+ r_to_s(p.r) +'deg')
    ELSE
        RETURN('GP' + i_to_s(grp_no) + ':' + chr(13) &
            + 'UF : '+ i_to_s(uframe_no) +', UT : '+ i_to_s(utool_no) +',' & 
            + '  CONFIG : '+ configstr + chr(13) &
            + 'X = '+ r_to_s(p.x) +'mm, Y = '+ r_to_s(p.y) + 'mm, Z = '+ r_to_s(p.z) +'mm, '+ chr(13) &
            + 'W = '+ r_to_s(p.w) +'deg, P = '+ r_to_s(p.p) +'deg, R = '+ r_to_s(p.r) +'deg')
    ENDIF
  END p_to_s_conf

-- Escapes quotes in a string
ROUTINE esc_quotes
  VAR
    i : INTEGER
    r : STRING[128]
    c : STRING[1]
  BEGIN
    r = ''
    FOR i=1 TO STR_LEN(s) DO
      -- chr(44) is '
      c = SUB_STR(s,i,1)
      IF (c = chr(44)) OR (c = '"') THEN
        r = r + '\'
      ENDIF

      r = r + c
    ENDFOR

    RETURN(r)
  END esc_quotes

-- searches for a string "srchStr" within another 
-- longer string "str"
-- need to handle error catching
-- return a boolean if found of not
ROUTINE search_str
  VAR
  	strLen  : INTEGER
  	srchLen : INTEGER
  	dmmy    : STRING[30]
  	found   : BOOLEAN
  	i       : INTEGER
  BEGIN
  	strLen = STR_LEN(str)
  	srchLen = STR_LEN(srchStr)
  	found = FALSE
  
  	FOR i=1 TO strLen DO
      dmmy = SUB_STR(str,i,srchLen)
      IF (dmmy = srchStr) THEN
        found = TRUE
          GOTO searched
   	 	ENDIF
  	ENDFOR
	SEARCHED::
	
	RETURN(found)
  END search_str

-- Determine if character is a number. A character of 
-- String[1] is evaluated to see if its a number. 
ROUTINE charisnum
  VAR
    isnum : BOOLEAN
  BEGIN
  	isnum = FALSE
  	IF STR_LEN(s) <= 1 THEN
  		IF (s='0') OR (s='1') OR (s='2') OR  (s='3') OR (s= '4') OR (s='5') OR (s='6') OR (s='7') OR (s='8') OR (s='9') THEN
  			isnum = TRUE
  		ENDIF
  	ELSE
      CLR_IO_STAT(TPDISPLAY)
      WRITE TPERROR(s, ' is not a character')
  	ENDIF
  	RETURN(isnum)
  END charisnum


--real data items are in the form:
--(-)d(.)ddd(E+|-)dd
ROUTINE strisreal
  VAR
    i : INTEGER
    isSci, isDot  : BOOLEAN
    c : STRING[1]
    d_cnt : INTEGER
  BEGIN
    --check if it contains 
    --strip white space at ends
    s = lstrip(rstrip(s))

    isSci = FALSE ; isDot = FALSE; -- flag if '.', '-', or 'E'
    d_cnt = 0 --count number of digits
    --loop through characters
    i = 1
    WHILE i <= STR_LEN(s) DO
      c = SUB_STR(s,i,1)
      IF (i=1) THEN
        --if a char make sure its a digit
        IF (STR_LEN(s) = 1) AND (NOT charisnum(c)) THEN
          RETURN(FALSE)
        ENDIF
        --check if negative
        IF (c = '-') THEN
          GOTO NEXTREALC
        ENDIF
      ENDIF

      --check if digit
      IF (charisnum(c)) THEN
        d_cnt = d_cnt + 1
        GOTO NEXTREALC
      ELSE
        --E must not come before .
        IF (c = '.') AND (NOT isDot) AND (NOT isSci) THEN
          isDot = TRUE
          --check that next character is a digit
          i = i + 1
          c = SUB_STR(s,i,1)
          IF (NOT charisnum(c)) THEN RETURN(FALSE); ENDIF
          GOTO NEXTREALC
        --might be scientific notation. E cant be last character
        --at least one digit must come before it.
        ELSE IF (c = 'E') AND (d_cnt>0) AND (i<STR_LEN(s)) AND (NOT isSci) THEN
          isSci = TRUE
          --next character must be a '+', or '-'
          i = i + 1
          c = SUB_STR(s,i,1)
          IF NOT (c = '+') AND NOT (c = '-') THEN RETURN(FALSE); ENDIF
          GOTO NEXTREALC
        ELSE
          RETURN(FALSE)
        ENDIF
        ENDIF
      ENDIF

      NEXTREALC::
      i = i + 1
    ENDWHILE

    RETURN(TRUE)
  END strisreal


ROUTINE strisint
  VAR
    i : INTEGER
    c : STRING[1]
  BEGIN
    --loop through characters
    i = 1
    WHILE i <= STR_LEN(s) DO
      c = SUB_STR(s,i,1)
      IF (i=1) THEN
        --check if negative
        IF (c = '-') THEN
          GOTO NEXTINTC
        ENDIF
      ENDIF

      IF (charisnum(c)) THEN
        GOTO NEXTINTC
      ELSE
        RETURN(FALSE)
      ENDIF

      NEXTINTC::
      i = i + 1
    ENDWHILE

    RETURN(TRUE)
  END strisint


-- string to integer
ROUTINE s_to_i
   VAR
   	int : INTEGER
   	isNum : BOOLEAN
    r : REAL
  BEGIN
  	isNum = FALSE
    int = 0
  	-- evaluate if string is a number
  	IF SUB_STR(s,1,1) = '-' THEN
  		int = -1
  		 IF charisnum(SUB_STR(s,2,1)) THEN
  		 	isNum = TRUE
  		 ENDIF
  	ELSE
  		IF charisnum(SUB_STR(s,1,1)) THEN
  			isNum = TRUE
  		ENDIF
  	ENDIF

  	--If not a number abort
  	IF isNum = FALSE THEN
      WRITE TPERROR(s, ' is not a number')
  	ENDIF

    --parse if it is a float
    IF search_str('.', s) AND isNum THEN
      CNV_STR_REAL(s, r)
      int = TRUNC(r)
    ELSE
      -- else string is an integer
      CNV_STR_INT(s, int)
    ENDIF
  	-- error if integer is uninitalized at this point
  	IF UNINIT(int) THEN
      WRITE TPERROR(s, ' is not a integer')
  	ENDIF
  	
  	RETURN(int)
  	
  END s_to_i

-- string to real
ROUTINE s_to_r
  VAR
    r : REAL
  BEGIN
    IF UNINIT(s) THEN
      WRITE TPERROR('s_to_r: string input is not initialized')
      RETURN(0.0)
    ENDIF

    CNV_STR_REAL(s, r)

    IF UNINIT(r) THEN
      WRITE TPERROR(s, ' is not a real number')
      RETURN(0.0)
  	ENDIF

    RETURN(r)
  END s_to_r

--binary string to a integer
ROUTINE bin_to_i
  VAR
    i : INTEGER
    num : INTEGER
  BEGIN
    num = 0
    FOR i = STR_LEN(s) DOWNTO 1 DO
      IF SUB_STR(s,i,1) = '1' THEN
        num = num + TRUNC(EXP((STR_LEN(s)-i) * LN(2)))
      ELSE IF SUB_STR(s,i,1) = '0' THEN
        num = num
      ELSE
        WRITE TPERROR(s, ' is not a binary number')
      ENDIF
      ENDIF
    ENDFOR

    RETURN(num)
  END bin_to_i

--integer to binary string
ROUTINE i_to_byte
  VAR
    res : INTEGER
    s : STRING[8]
  BEGIN
    --initialize string
    s = ''
    res = i
    REPEAT
      IF res MOD 2 = 1 THEN
        IF msb THEN s = s + '1' ; ELSE s = '1' + s ; ENDIF
      ELSE
        IF msb THEN s = s + '0' ; ELSE s = '0' + s ; ENDIF
      ENDIF

      res = res DIV 2

    UNTIL(res <= 0)

    RETURN(s)

  END i_to_byte


--string to vector
ROUTINE s_to_vec
  VAR
    v : VECTOR
    i : INTEGER
    arr : ARRAY[3] OF REAL
  BEGIN
    s_to_rarr(s, delim, arr)
    FOR i=1 TO ARRAY_LEN(arr) DO
      v.x = arr[1]
      v.y = arr[2]
      v.z = arr[3]
    ENDFOR

    RETURN(v)
  END s_to_vec

ROUTINE s_to_xyzwpr
  VAR
    pos : XYZWPR
    i : INTEGER
    arr : ARRAY[6] OF REAL
  BEGIN
    s_to_rarr(s, delim, arr)
    FOR i=1 TO ARRAY_LEN(arr) DO
      pos.x = arr[1]
      pos.y = arr[2]
      pos.z = arr[3]
      pos.w = arr[4]
      pos.p = arr[5]
      pos.r = arr[6]
    ENDFOR

    RETURN(pos)
  END s_to_xyzwpr


ROUTINE s_to_arr
-- define chunk size in preprocessor
%define chunk 16
%defeval chunk2 %eval chunk+1
  VAR
    i : INTEGER
    j : INTEGER
    idx : INTEGER
    splits : INTEGER
    --Need to store in temporary string array.
    --since this cannot be variable size we will
    --have to split the data into defined chunck sizes
    --Since split_str will dump the rest of the string
    --into the last array index if there is still data left
    --we can use this to process the chunks.
    --
    -- array needs to be 1 higher than chunk size
    -- to store the excess string during the split
    -- operation.
    s_arr : ARRAY[chunk2] of STRING[chunk]
  BEGIN
    -- initialize output array index
    idx = 0
    -- count how many splits will be made
    splits = char_count(s, delim)
    -- divide by chunks to accomodate s_arr variables size
    splits = TRUNC(splits/chunk) + 1

    --loop split function over total number of chunks
    FOR i=1 TO splits DO
      --split by delimiter in chunk sized array
      split_str(s, delim, s_arr)
      --loop over size of s_arr, and store real values
      -- into final output array.
      FOR j=idx TO (chunk*i-1) DO
        IF (NOT(s_arr[j MOD chunk + 1] = '')) AND (j < ARRAY_LEN(out_arr)) THEN
          out_arr[j + 1] = s_arr[j MOD chunk + 1]
        ENDIF
      ENDFOR
      -- modify string to last index to see
      -- if there are more delimiter chars
      -- to parse
      s = s_arr[chunk2]
      --increase idx to next chunk
      idx = chunk
    ENDFOR

  END s_to_arr

ROUTINE s_to_rarr
-- define chunk size in preprocessor
%define chunk 16
%defeval chunk2 %eval chunk+1
  VAR
    i : INTEGER
    j : INTEGER
    idx : INTEGER
    splits : INTEGER
    s_arr : ARRAY[chunk2] of STRING[chunk]
  BEGIN
    idx = 0
    splits = char_count(s, delim)
    splits = TRUNC(splits/chunk) + 1

    FOR i=1 TO splits DO
      split_str(s, delim, s_arr)
      FOR j=idx TO (chunk*i-1) DO
        IF (NOT(s_arr[j MOD chunk + 1] = '')) AND (j < ARRAY_LEN(out_arr)) THEN
          out_arr[j + 1] = s_to_r(s_arr[j MOD chunk + 1])
        ENDIF
      ENDFOR
      s = s_arr[chunk2]

      idx = chunk
    ENDFOR
  
  END s_to_rarr

ROUTINE s_to_iarr
-- define chunk size in preprocessor
%define chunk 16
%defeval chunk2 %eval chunk+1
  VAR
    i : INTEGER
    j : INTEGER
    idx : INTEGER
    splits : INTEGER
    s_arr : ARRAY[chunk2] of STRING[chunk]
  BEGIN
    idx = 0
    splits = char_count(s, delim)
    splits = TRUNC(splits/chunk) + 1

    FOR i=1 TO splits DO
      split_str(s, delim, s_arr)
      FOR j=idx TO (chunk*i-1) DO
        IF (NOT(s_arr[j MOD chunk + 1] = '')) AND (j < ARRAY_LEN(out_arr)) THEN
          out_arr[j + 1] = s_to_i(s_arr[j MOD chunk + 1])
        ENDIF
      ENDFOR
      s = s_arr[chunk2]

      idx = chunk
    ENDFOR
  
  END s_to_iarr

ROUTINE sarr_to_rarr
  VAR
    i  : INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(sarr) DO
      --do not attempt to fill uninitialized data
      --for instance if JOINTPOS6 is fit into JOINTPOS9 type
      IF NOT UNINIT(sarr[i]) THEN
        out_rarr[i] = s_to_r(sarr[i])
      ENDIF
    ENDFOR
  END sarr_to_rarr

ROUTINE rarr_to_sarr
  VAR
    i  : INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(rarr) DO
      out_sarr[i] = r_to_s(rarr[i])
    ENDFOR
  END rarr_to_sarr

ROUTINE sarr_to_iarr
  VAR
    i  : INTEGER
  BEGIN
    FOR i=1 TO ARRAY_LEN(sarr) DO
      out_iarr[i] = s_to_i(sarr[i])
    ENDFOR
  END sarr_to_iarr

ROUTINE numreg_to_s
  VAR
    real_flg    :  BOOLEAN
    real_val   :  REAL
    int_val     : INTEGER
    STATUS : INTEGER
    s_val : STRING[10]
  BEGIN
    GET_REG(reg_no, real_flg, int_val, real_val, STATUS)
    IF (STATUS <> 0) THEN
      WRITE TPERROR('numreg_to_s: error returning R[', i_to_s(reg_no), ']')
    ENDIF
    --store as string
    IF real_flg = FALSE THEN
      s_val = i_to_s(int_val)
    ELSE
      s_val = r_to_s(real_val)
    ENDIF

    RETURN(lstrip(rstrip(s_val)))
  END numreg_to_s

ROUTINE strreg_to_s
  VAR
    STATUS : INTEGER
    s_val : STRING[50]
  BEGIN
    GET_STR_REG(reg_no,s_val,status)
    IF (STATUS <> 0) THEN
      WRITE TPERROR('strreg_to_s: error returning SR[', i_to_s(reg_no), ']')
    ENDIF

    RETURN(s_val)
  END strreg_to_s

ROUTINE posreg_to_s
  VAR
    pos_type : INTEGER
    num_axes  : INTEGER
    STATUS : INTEGER
    xyz   : XYZWPREXT
    joint : JOINTPOS
  BEGIN
    -- see which representation the posreg is in
    POS_REG_TYPE(reg_no, grp_no, pos_type, num_axes, STATUS)
    IF (STATUS <> 0) THEN
      WRITE TPERROR('posreg_to_s, error finding register type for PR[', 
                    i_to_s(reg_no), ']')
    ENDIF

    SELECT pos_type OF
      -- cartesian rep
      CASE (1, 2, 6) :
        -- get position register as XYZWPREXT
        xyz = GET_POS_REG(reg_no, STATUS, grp_no)
        IF (STATUS <> 0) THEN
          WRITE TPERROR('posreg_to_s, could not retrieve PR[', 
                    i_to_s(reg_no), ']')
        ENDIF
        -- return as string
        RETURN(p_to_s_conf(xyz, grp_no, ($MNUFRAMENUM[grp_no]), ($MNUTOOLNUM[grp_no])))
      -- joint rep
      CASE (9) :
        -- get position register as JOINTPOS
        joint = GET_JPOS_REG(reg_no, STATUS, grp_no)
        IF (STATUS <> 0) THEN
          WRITE TPERROR('posreg_to_s, could not retrieve PR[', 
                    i_to_s(reg_no), ']')
        ENDIF
        -- return as string
        RETURN(joint_to_s(joint, ','))
    ENDSELECT
  END posreg_to_s
